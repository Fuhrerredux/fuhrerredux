### Mobilisation Effects
### Written by ~mw~
#
# How to use:
#
#	increase_mobilisation = yes
#


increase_mobilisation = {
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = tot_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = war_economy
		}
	}
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = civilian_economy
		}
		swap_ideas = {
			remove_idea = civilian_economy
			add_idea = low_economic_mobilisation
		}
	}
}

decrease_mobilisation = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = tot_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = tot_economic_mobilisation
			add_idea = war_economy
		}
	}
}

disband_twenty_percent_units = {
	save_event_target_as = disband_country
	XXB = {
		set_temp_variable = {
			old_manpower = manpower_k
		}
	}
	random_state = {
		limit = {
			impassable = yes
			is_fully_controlled_by = owner
		}
		owner = { save_event_target_as = disband_state_owner }
		save_event_target_as = disband_state
		XXB = { set_state_owner = PREV }
	}
	transfer_units_fraction = {
		target = XXB
		size = 0
		army_ratio = 0.2
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	XXB = {
		delete_unit = {
			disband = yes
		}
		set_temp_variable = {
			manpower_diff = manpower_k
		}
		subtract_from_temp_variable = {
			manpower_diff = old_manpower
		}
		while_loop_effect = { #avoid overflows
			limit = { check_variable = { manpower_diff > 1 } }
			subtract_from_temp_variable = { manpower_diff = 1 }
			event_target:disband_country = { add_manpower = 1000 }
			add_manpower = -1000
		}
		multiply_temp_variable = {
			manpower_diff = 1000
		}
		event_target:disband_country = { add_manpower = PREV.manpower_diff }
		multiply_temp_variable = {
			manpower_diff = -1
		}
		add_manpower = manpower_diff
	}
	event_target:disband_state = {
		event_target:disband_state_owner = { set_state_owner = PREV }
	}
	annex_country = {
		target = XXB
		transfer_troops = no
	}
}

calculate_maximum_divisions = {
	# base upper division limit = number of factories
	
	set_temp_variable = { mil_factory_temp = num_of_military_factories }
	
	set_temp_variable = { civ_factory_temp = num_of_civilian_factories }
	
	multiply_temp_variable  = { mil_factory_temp = 1.15 }
	
	multiply_temp_variable  = { civ_factory_temp = 1.00 }
	
	set_variable = { max_divisions = mil_factory_temp }	
	
	add_to_variable = { max_divisions = civ_factory_temp }	
	
	add_to_variable = { max_divisions = mil_factory_temp }
	
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { max_divisions = 1.2 }
	}
		

	# +15% for majors
	if = {
		limit = { is_major = yes }
		multiply_variable = { max_divisions = 1.15 }
	}
	
	if = {
		limit = {
			OR = {
				has_idea = colonial_economy
				has_idea = unbalanced_economy
			}
		}
		multiply_variable = { max_divisions = 0.84 }
	}
	else_if = {
		limit = {
			OR = {
				has_idea = undisturbed_isolation
				has_idea = isolation
			}
		}
		multiply_variable = { max_divisions = 0.88 }
	}
	else_if = {
		limit = {
			has_idea = civilian_economy
		}
		multiply_variable = { max_divisions = 0.92 }
	}
	else_if = {
		limit = {
			OR = {
				has_idea = low_economic_mobilisation
				has_idea = partial_economic_mobilisation
			}
		}
		multiply_variable = { max_divisions = 0.96 }
	}

	round_variable = max_divisions
}

calculate_actual_division_number = {
	set_variable = { num_actual_divisions = num_divisions }
	subtract_from_variable = { num_actual_divisions = num_fake_intel_divisions }
	subtract_from_variable = { num_actual_divisions = num_expeditionary_divisions_received }
	add_to_variable = { num_actual_divisions = num_expeditionary_divisions_sent }
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}

